// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./log_event_package.proto
package com.wandoujia.logv3.model.packages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;

/**
 * 任务 (新发起一个task，会新建一个id,该id在整个task过程中继承，直到task结束。)
 */
public final class TaskEvent extends Message {

  public static final Integer DEFAULT_IDENTITY = 0;
  public static final Status DEFAULT_STATUS = Status.START;
  public static final Result DEFAULT_RESULT = Result.SUCCESS;
  public static final Action DEFAULT_ACTION = Action.DOWNLOAD;
  public static final String DEFAULT_ERROR_DETAIL = "";

  /**
   * 新发起一个task，会新建一个id,该id在整个task过程中继承，直到task结束。
   */
  @ProtoField(tag = 1, type = INT32)
  public final Integer identity;

  /**
   * task的状态，start,end,trigger,retry...
   */
  @ProtoField(tag = 2, type = ENUM)
  public final Status status;

  /**
   * task 结果（result在ios是关键字）,success,fail,cancel
   */
  @ProtoField(tag = 3, type = ENUM)
  public final Result result;

  /**
   * 任务的操作
   */
  @ProtoField(tag = 4, type = ENUM)
  public final Action action;

  /**
   * 出错信息
   */
  @ProtoField(tag = 5, type = STRING)
  public final String error_detail;

  @ProtoField(tag = 6)
  public final ViewLogPackage view_log_package;

  private TaskEvent(Builder builder) {
    super(builder);
    this.identity = builder.identity;
    this.status = builder.status;
    this.result = builder.result;
    this.action = builder.action;
    this.error_detail = builder.error_detail;
    this.view_log_package = builder.view_log_package;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TaskEvent)) return false;
    TaskEvent o = (TaskEvent) other;
    return equals(identity, o.identity)
        && equals(status, o.status)
        && equals(result, o.result)
        && equals(action, o.action)
        && equals(error_detail, o.error_detail)
        && equals(view_log_package, o.view_log_package);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = identity != null ? identity.hashCode() : 0;
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (this.result != null ? this.result.hashCode() : 0);
      result = result * 37 + (action != null ? action.hashCode() : 0);
      result = result * 37 + (error_detail != null ? error_detail.hashCode() : 0);
      result = result * 37 + (view_log_package != null ? view_log_package.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TaskEvent> {

    public Integer identity;
    public Status status;
    public Result result;
    public Action action;
    public String error_detail;
    public ViewLogPackage view_log_package;

    public Builder() {
    }

    public Builder(TaskEvent message) {
      super(message);
      if (message == null) return;
      this.identity = message.identity;
      this.status = message.status;
      this.result = message.result;
      this.action = message.action;
      this.error_detail = message.error_detail;
      this.view_log_package = message.view_log_package;
    }

    /**
     * 新发起一个task，会新建一个id,该id在整个task过程中继承，直到task结束。
     */
    public Builder identity(Integer identity) {
      this.identity = identity;
      return this;
    }

    /**
     * task的状态，start,end,trigger,retry...
     */
    public Builder status(Status status) {
      this.status = status;
      return this;
    }

    /**
     * task 结果（result在ios是关键字）,success,fail,cancel
     */
    public Builder result(Result result) {
      this.result = result;
      return this;
    }

    /**
     * 任务的操作
     */
    public Builder action(Action action) {
      this.action = action;
      return this;
    }

    /**
     * 出错信息
     */
    public Builder error_detail(String error_detail) {
      this.error_detail = error_detail;
      return this;
    }

    public Builder view_log_package(ViewLogPackage view_log_package) {
      this.view_log_package = view_log_package;
      return this;
    }

    @Override
    public TaskEvent build() {
      return new TaskEvent(this);
    }
  }

  public enum Status
      implements ProtoEnum {
    START(0),
    /**
     * 开始
     */
    RETRY(1),
    /**
     * 重试
     */
    END(2),
    /**
     * 结束
     */
    PAUSE(3),
    /**
     * 暂停
     */
    READY(4),
    /**
     * 准备完成
     */
    PENDING(5),
    /**
     * 等待
     */
    TRIGGER(6);

    private final int value;

    private Status(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public enum Result
      implements ProtoEnum {
    SUCCESS(0),
    /**
     * 成功
     */
    FAIL(1),
    /**
     * 失败
     */
    CANCEL(2);

    private final int value;

    private Result(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public enum Action
      implements ProtoEnum {
    DOWNLOAD(0),
    /**
     * 下载
     */
    CONNECT(1),
    /**
     * 连接
     */
    PAY(2),
    /**
     * 支付
     */
    TRANSFER(3),
    /**
     * 传输
     */
    PLAY(4),
    /**
     * 播放
     */
    READ(5),
    /**
     * 阅读
     */
    OPEN(6),
    /**
     * 打开
     */
    SEARCH(7),
    /**
     * 搜索
     */
    LOGIN_IN(8),
    /**
     * 登陆
     */
    SIGN_UP(9),
    /**
     * 注册
     */
    CLEAR(10),
    /**
     * 清理
     */
    UPGRADE(11),
    /**
     * 升级
     */
    SYNC(12),
    /**
     * 同步
     */
    SHARE(13),
    /**
     * 分享
     */
    SELF_UPGRADE(14),
    /**
     * 豌豆荚自己升级
     */
    ORDER(15),
    /**
     * 订单
     */
    CONNECTION_SCAN_ADB(18),
    /**
     * 扫瞄ADB
     */
    CONNECTION_GET_DEVICE_INFO(19),
    /**
     * 获得设备信息
     */
    CONNECTION_DOWNLOAD_DRIVER(20),
    /**
     * 下载启动器
     */
    CONNECTION_INSTALL_DRIVER(21),
    /**
     * 安装启动器
     */
    CONNECTION_ADB_IS_ONLINE(22),
    /**
     * 检查ADB是否在线
     */
    CONNECTION_GET_UDID(23),
    /**
     * 获得UDID
     */
    CONNECTION_CHECK_PROXY(24),
    /**
     * 检查proxy
     */
    CONNECTION_INSTALL_PROXY(25),
    /**
     * 安装proxy
     */
    CONNECTION_UPGRADE_PROXY(26),
    /**
     * 升级proxy
     */
    CONNECTION_FORWARD(27),
    /**
     * 转发
     */
    SET_AS_WALLPAPER(28),
    /**
     * 设置壁纸
     */
    CONNECTION_OPEN_DEBUG_VIEW(29),
    /**
     * 连接打开debug
     */
    INSTALL(30),
    /**
     * 安装
     */
    UNINSTALL(31);

    private final int value;

    private Action(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }
}

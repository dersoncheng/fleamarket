// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./log_transition.proto
package com.wandoujia.logv3.model.packages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;

/**
 * 剩余内存、存储相关信息
 */
public final class ResidualMemoryPackage extends Message {

  public static final Long DEFAULT_RESIDUAL_MEMORY_SIZE = 0L;
  public static final Long DEFAULT_RESIDUAL_SDSIZE1 = 0L;
  public static final Long DEFAULT_RESIDUAL_SDSIZE2 = 0L;

  /**
   * 剩余空间，单位为 byte,内存的大小
   */
  @ProtoField(tag = 1, type = INT64)
  public final Long residual_memory_size;

  /**
   * 剩余空间，单位为 byte,SD 卡槽一的大小
   */
  @ProtoField(tag = 2, type = INT64)
  public final Long residual_sdsize1;

  /**
   * 剩余空间，单位为 byte,SD 卡槽二的大小
   */
  @ProtoField(tag = 3, type = INT64)
  public final Long residual_sdsize2;

  private ResidualMemoryPackage(Builder builder) {
    super(builder);
    this.residual_memory_size = builder.residual_memory_size;
    this.residual_sdsize1 = builder.residual_sdsize1;
    this.residual_sdsize2 = builder.residual_sdsize2;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ResidualMemoryPackage)) return false;
    ResidualMemoryPackage o = (ResidualMemoryPackage) other;
    return equals(residual_memory_size, o.residual_memory_size)
        && equals(residual_sdsize1, o.residual_sdsize1)
        && equals(residual_sdsize2, o.residual_sdsize2);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = residual_memory_size != null ? residual_memory_size.hashCode() : 0;
      result = result * 37 + (residual_sdsize1 != null ? residual_sdsize1.hashCode() : 0);
      result = result * 37 + (residual_sdsize2 != null ? residual_sdsize2.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ResidualMemoryPackage> {

    public Long residual_memory_size;
    public Long residual_sdsize1;
    public Long residual_sdsize2;

    public Builder() {
    }

    public Builder(ResidualMemoryPackage message) {
      super(message);
      if (message == null) return;
      this.residual_memory_size = message.residual_memory_size;
      this.residual_sdsize1 = message.residual_sdsize1;
      this.residual_sdsize2 = message.residual_sdsize2;
    }

    /**
     * 剩余空间，单位为 byte,内存的大小
     */
    public Builder residual_memory_size(Long residual_memory_size) {
      this.residual_memory_size = residual_memory_size;
      return this;
    }

    /**
     * 剩余空间，单位为 byte,SD 卡槽一的大小
     */
    public Builder residual_sdsize1(Long residual_sdsize1) {
      this.residual_sdsize1 = residual_sdsize1;
      return this;
    }

    /**
     * 剩余空间，单位为 byte,SD 卡槽二的大小
     */
    public Builder residual_sdsize2(Long residual_sdsize2) {
      this.residual_sdsize2 = residual_sdsize2;
      return this;
    }

    @Override
    public ResidualMemoryPackage build() {
      return new ResidualMemoryPackage(this);
    }
  }
}

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./log_common_package.proto
package com.wandoujia.logv3.model.packages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;

/**
 * 时间信息
 */
public final class TimePackage extends Message {

  public static final Long DEFAULT_LOCAL_ELAPSED_TIME = 0L;
  public static final Long DEFAULT_LOCAL_TIMESTAMP = 0L;
  public static final Long DEFAULT_SERVER_TIMESTAMP = 0L;

  /**
   * Event 发生时的本地距离启动的时间（保证log传输过程中单增）
   */
  @ProtoField(tag = 1, type = INT64)
  public final Long local_elapsed_time;

  /**
   * Event 发生时用户设备的本地 utc 时间戳
   */
  @ProtoField(tag = 2, type = INT64)
  public final Long local_timestamp;

  /**
   * 服务器端接收日志的 utc 时间戳
   */
  @ProtoField(tag = 3, type = INT64)
  public final Long server_timestamp;

  private TimePackage(Builder builder) {
    super(builder);
    this.local_elapsed_time = builder.local_elapsed_time;
    this.local_timestamp = builder.local_timestamp;
    this.server_timestamp = builder.server_timestamp;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TimePackage)) return false;
    TimePackage o = (TimePackage) other;
    return equals(local_elapsed_time, o.local_elapsed_time)
        && equals(local_timestamp, o.local_timestamp)
        && equals(server_timestamp, o.server_timestamp);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = local_elapsed_time != null ? local_elapsed_time.hashCode() : 0;
      result = result * 37 + (local_timestamp != null ? local_timestamp.hashCode() : 0);
      result = result * 37 + (server_timestamp != null ? server_timestamp.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TimePackage> {

    public Long local_elapsed_time;
    public Long local_timestamp;
    public Long server_timestamp;

    public Builder() {
    }

    public Builder(TimePackage message) {
      super(message);
      if (message == null) return;
      this.local_elapsed_time = message.local_elapsed_time;
      this.local_timestamp = message.local_timestamp;
      this.server_timestamp = message.server_timestamp;
    }

    /**
     * Event 发生时的本地距离启动的时间（保证log传输过程中单增）
     */
    public Builder local_elapsed_time(Long local_elapsed_time) {
      this.local_elapsed_time = local_elapsed_time;
      return this;
    }

    /**
     * Event 发生时用户设备的本地 utc 时间戳
     */
    public Builder local_timestamp(Long local_timestamp) {
      this.local_timestamp = local_timestamp;
      return this;
    }

    /**
     * 服务器端接收日志的 utc 时间戳
     */
    public Builder server_timestamp(Long server_timestamp) {
      this.server_timestamp = server_timestamp;
      return this;
    }

    @Override
    public TimePackage build() {
      return new TimePackage(this);
    }
  }
}

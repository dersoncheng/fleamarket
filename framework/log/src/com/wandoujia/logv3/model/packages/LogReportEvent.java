// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./log_muce.proto
package com.wandoujia.logv3.model.packages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class LogReportEvent extends Message {

  public static final Long DEFAULT_LOCAL_INCREMENT_ID = 0L;
  public static final Boolean DEFAULT_REAL_TIME = false;
  public static final String DEFAULT_PROTO_VERSION = "1.0.0";

  /**
   * 本次事件的随机ID（操作中，客户端本地自增）
   */
  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long local_increment_id;

  /**
   * 是否实时事件
   */
  @ProtoField(tag = 2, type = BOOL)
  public final Boolean real_time;

  /**
   * 协议版本
   */
  @ProtoField(tag = 3, type = STRING)
  public final String proto_version;

  /**
   * 上报必须带的信息
   */
  @ProtoField(tag = 4, label = REQUIRED)
  public final CommonPackage common_package;

  /**
   * 事件package
   */
  @ProtoField(tag = 5)
  public final EventPackage event_package;

  /**
   * 附加信息package
   */
  @ProtoField(tag = 6)
  public final ExtraPackage extra_package;

  private LogReportEvent(Builder builder) {
    super(builder);
    this.local_increment_id = builder.local_increment_id;
    this.real_time = builder.real_time;
    this.proto_version = builder.proto_version;
    this.common_package = builder.common_package;
    this.event_package = builder.event_package;
    this.extra_package = builder.extra_package;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LogReportEvent)) return false;
    LogReportEvent o = (LogReportEvent) other;
    return equals(local_increment_id, o.local_increment_id)
        && equals(real_time, o.real_time)
        && equals(proto_version, o.proto_version)
        && equals(common_package, o.common_package)
        && equals(event_package, o.event_package)
        && equals(extra_package, o.extra_package);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = local_increment_id != null ? local_increment_id.hashCode() : 0;
      result = result * 37 + (real_time != null ? real_time.hashCode() : 0);
      result = result * 37 + (proto_version != null ? proto_version.hashCode() : 0);
      result = result * 37 + (common_package != null ? common_package.hashCode() : 0);
      result = result * 37 + (event_package != null ? event_package.hashCode() : 0);
      result = result * 37 + (extra_package != null ? extra_package.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<LogReportEvent> {

    public Long local_increment_id;
    public Boolean real_time;
    public String proto_version;
    public CommonPackage common_package;
    public EventPackage event_package;
    public ExtraPackage extra_package;

    public Builder() {
    }

    public Builder(LogReportEvent message) {
      super(message);
      if (message == null) return;
      this.local_increment_id = message.local_increment_id;
      this.real_time = message.real_time;
      this.proto_version = message.proto_version;
      this.common_package = message.common_package;
      this.event_package = message.event_package;
      this.extra_package = message.extra_package;
    }

    /**
     * 本次事件的随机ID（操作中，客户端本地自增）
     */
    public Builder local_increment_id(Long local_increment_id) {
      this.local_increment_id = local_increment_id;
      return this;
    }

    /**
     * 是否实时事件
     */
    public Builder real_time(Boolean real_time) {
      this.real_time = real_time;
      return this;
    }

    /**
     * 协议版本
     */
    public Builder proto_version(String proto_version) {
      this.proto_version = proto_version;
      return this;
    }

    /**
     * 上报必须带的信息
     */
    public Builder common_package(CommonPackage common_package) {
      this.common_package = common_package;
      return this;
    }

    /**
     * 事件package
     */
    public Builder event_package(EventPackage event_package) {
      this.event_package = event_package;
      return this;
    }

    /**
     * 附加信息package
     */
    public Builder extra_package(ExtraPackage extra_package) {
      this.extra_package = extra_package;
      return this;
    }

    @Override
    public LogReportEvent build() {
      checkRequiredFields();
      return new LogReportEvent(this);
    }
  }
}

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./audio.proto
package com.wandoujia.media.pmp.models;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.SINT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.PACKED;

public final class AudioArtist extends Message {

  public static final Long DEFAULT_ID = 0L;
  public static final String DEFAULT_ARTIST = "";
  public static final List<Long> DEFAULT_TRACKS = Collections.emptyList();
  public static final List<Long> DEFAULT_ALBUMS = Collections.emptyList();
  public static final Integer DEFAULT_NUMBER_OF_ALBUMS = 0;
  public static final Integer DEFAULT_NUMBER_OF_TRACKS = 0;

  @ProtoField(tag = 1, type = SINT64)
  public final Long id;

  @ProtoField(tag = 2, type = STRING)
  public final String artist;

  @ProtoField(tag = 3, type = SINT64, label = PACKED)
  public final List<Long> tracks;

  @ProtoField(tag = 4, type = SINT64, label = PACKED)
  public final List<Long> albums;

  @ProtoField(tag = 5, type = INT32)
  public final Integer number_of_albums;

  @ProtoField(tag = 6, type = INT32)
  public final Integer number_of_tracks;

  private AudioArtist(Builder builder) {
    super(builder);
    this.id = builder.id;
    this.artist = builder.artist;
    this.tracks = immutableCopyOf(builder.tracks);
    this.albums = immutableCopyOf(builder.albums);
    this.number_of_albums = builder.number_of_albums;
    this.number_of_tracks = builder.number_of_tracks;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AudioArtist)) return false;
    AudioArtist o = (AudioArtist) other;
    return equals(id, o.id)
        && equals(artist, o.artist)
        && equals(tracks, o.tracks)
        && equals(albums, o.albums)
        && equals(number_of_albums, o.number_of_albums)
        && equals(number_of_tracks, o.number_of_tracks);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = id != null ? id.hashCode() : 0;
      result = result * 37 + (artist != null ? artist.hashCode() : 0);
      result = result * 37 + (tracks != null ? tracks.hashCode() : 1);
      result = result * 37 + (albums != null ? albums.hashCode() : 1);
      result = result * 37 + (number_of_albums != null ? number_of_albums.hashCode() : 0);
      result = result * 37 + (number_of_tracks != null ? number_of_tracks.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<AudioArtist> {

    public Long id;
    public String artist;
    public List<Long> tracks;
    public List<Long> albums;
    public Integer number_of_albums;
    public Integer number_of_tracks;

    public Builder() {
    }

    public Builder(AudioArtist message) {
      super(message);
      if (message == null) return;
      this.id = message.id;
      this.artist = message.artist;
      this.tracks = copyOf(message.tracks);
      this.albums = copyOf(message.albums);
      this.number_of_albums = message.number_of_albums;
      this.number_of_tracks = message.number_of_tracks;
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder artist(String artist) {
      this.artist = artist;
      return this;
    }

    public Builder tracks(List<Long> tracks) {
      this.tracks = checkForNulls(tracks);
      return this;
    }

    public Builder albums(List<Long> albums) {
      this.albums = checkForNulls(albums);
      return this;
    }

    public Builder number_of_albums(Integer number_of_albums) {
      this.number_of_albums = number_of_albums;
      return this;
    }

    public Builder number_of_tracks(Integer number_of_tracks) {
      this.number_of_tracks = number_of_tracks;
      return this;
    }

    @Override
    public AudioArtist build() {
      return new AudioArtist(this);
    }
  }
}
